CMAKE_MINIMUM_REQUIRED(VERSION 2.8.7)
PROJECT(dynamind-gui)

FIND_PATH(DYNAMINDDEV DynaMindDevCmake.txt
            PATHS   $ENV{DYNAMIND_DIR}/include
            PATH_SUFFIXES dynamindcore/CMake)

IF(DYNAMIND_INCLUDE_DIR)
        MESSAGE(STATUS "Compiled from toolbox")
        MESSAGE(STATUS "DYNAMIND_INCLUDE_DIR ${DYNAMIND_INCLUDE_DIR}")
        SET (DYNAMIND_CORE_LIBRARY dynamindcore)
        SET (DYNAMIND_TOOLBOX_LIBRARY dynamindtoolbox)
        SET (DYNAMIND_EXTENSIONS_LIBRARY dynamind-extensions)
        MESSAGE(STATUS "${DYNAMIND_CORE_LIBRARY}")
ELSE()
        MESSAGE(STATUS "Compiled from stand alone")
        FIND_PATH(DYNAMINDDEV DynaMindDevCmake.txt
        PATHS $ENV{DYNAMIND_DIR}/include
        PATH_SUFFIXES dynamindcore/CMake)

	IF(DYNAMINDDEV)
		INCLUDE(${DYNAMINDDEV}/DynaMindDevCmake.txt)
	ELSE()
		MESSAGE(FATAL_ERROR "Could not find dynamind. Maybe not installed ?")
	ENDIF()
	ELSE()
		MESSAGE(STATUS "Compiled from toolbox")
		MESSAGE(STATUS "DYNAMIND_INCLUDE_DIR ${DYNAMIND_INCLUDE_DIR}")
		SET (DYNAMIND_CORE_LIBRARY dynamindcore)
		MESSAGE(STATUS "${DYNAMIND_CORE_LIBRARY}")
ENDIF()


IF(USEQT5)
    MESSAGE(STATUS "Using Qt5 for gui")
    SET(CMAKE_INCLUDE_CURRENT_DIR ON)
    SET(CMAKE_AUTOMOC ON)
    FIND_PACKAGE(Qt5Core)
    FIND_PACKAGE(Qt5Concurrent)
    FIND_PACKAGE(Qt5Sql)
    FIND_PACKAGE(Qt5Xml)
    FIND_PACKAGE(Qt5Gui)
    FIND_PACKAGE(Qt5Test)
    FIND_PACKAGE(Qt5Svg)
    FIND_PACKAGE(Qt5Network)
    FIND_PACKAGE(Qt5Widgets)
    FIND_PACKAGE(Qt5PrintSupport)
    FIND_PACKAGE(Qt5OpenGL)
    FIND_PACKAGE(Qt5WebEngineWidgets)
    IF(CMAKE_SYSTEM_NAME STREQUAL Linux)
        FIND_PACKAGE(Qt5WebKit)
        FIND_PACKAGE(Qt5WebKitWidgets)
    ENDIF()

    IF(APPLE)
        FIND_PACKAGE(Qt5WebEngineWidgets)
	INCLUDE_DIRECTORIES(BEFORE /usr/local/opt/qt5/include)
    ENDIF()
    INCLUDE_DIRECTORIES(${Qt5Core_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${Qt5Concurrent_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${Qt5Xml_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${Qt5Sql_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${Qt5Gui_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${Qt5Test_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${Qt5Svg_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${Qt5Network_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${Qt5Widgets_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${Qt5PrintSupport_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${Qt5OpenGL_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${Qt5WebEngineWidgets_INCLUDE_DIRS})



    ADD_DEFINITIONS(-DUSEQT5)
ELSE()
    MESSAGE(STATUS "Using Qt4 for gui")
    FIND_PACKAGE(Qt4 COMPONENTS QtCore QtGui QtOpenGL QtXml QtWebkit QtNetwork QtSvg QtTest REQUIRED)
    SET(QT_USE_QTXML TRUE)
    SET(QT_USE_QTTEST TRUE)
    SET(QT_USE_QTSQL TRUE)
    SET(QT_USE_QTGUI TRUE)
    SET(QT_USE_QTCORE TRUE)
    SET(QT_USE_QTWEBKIT TRUE)
    SET(QT_USE_QTSVG TRUE)
    SET(QT_USE_QTNETWORK TRUE)
    INCLUDE(${QT_USE_FILE})
ENDIF()

SET(CGAL_DONT_OVERRIDE_CMAKE_FLAGS "ON" CACHE BOOL "")
find_package(CGAL QUIET COMPONENTS Core REQUIRED)
include(${CGAL_USE_FILE})
FIND_PACKAGE(GDAL)
INCLUDE_DIRECTORIES(${GDAL_INCLUDE_DIR})

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" VERSION_GREATER 2.6)
  if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}" VERSION_GREATER 2.8.3)
    cmake_policy(VERSION 2.8.4)
  else()
    cmake_policy(VERSION 2.6)
  endif()
endif()


SET(Boost_USE_STATIC_LIBS   OFF)

INCLUDE_DIRECTORIES( ${DYNAMIND_INCLUDE_DIR} ${QT_QTCORE_INCLUDE_DIR})

IF(CMAKE_BUILD_TYPE STREQUAL Debug)
        MESSAGE(STATUS "Build Type = Debug")
        ADD_DEFINITIONS(-DDEBUG)
ELSE()
        MESSAGE(STATUS "Build Type = Release")
ENDIF()
IF(DYNAMIND_TOOLBOX_BUILD_DIR)
    SET(LIBRARY_OUTPUT_PATH ${DYNAMIND_TOOLBOX_BUILD_DIR})
    SET(EXECUTABLE_OUTPUT_PATH ${DYNAMIND_TOOLBOX_BUILD_DIR})
ELSE()
    SET(LIBRARY_OUTPUT_PATH ${dynamind-gui_BINARY_DIR})
    SET(EXECUTABLE_OUTPUT_PATH ${dynamind-gui_BINARY_DIR})
ENDIF()

OPTION(WITH_VIEWER "if with Viewer plugin" ON)

if(WITH_VIEWER)
	add_definitions( -DVIEWER )
	ADD_SUBDIRECTORY(DynaMind-Viewer)
endif(WITH_VIEWER)


ADD_SUBDIRECTORY(src/libdynamind-gui)
ADD_SUBDIRECTORY(src/dynamind-modelbuilder)
#create menu entry in ubuntu
#IF(UNIX AND NOT WIN32)
#    ADD_SUBDIRECTORY(data)
#ENDIF()
#INCLUDE(DynaMindGuiCPack.txt)
